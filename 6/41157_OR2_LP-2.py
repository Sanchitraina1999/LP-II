# -*- coding: utf-8 -*-
"""OR2-LP2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_z9BpSrycC5zURaxc0uToxRo3bpMDKFa

Critical Path Method : Project schedule modeling technique
Network Diagram has many paths originating from one point and ending at another point. Every path has a duration.

Critical Path :

The longest path in the network diagram
The shortest duration to complete the project.
The activities in the critical path are known as critical activities and if these activities are delayed then the completion of the whole project is also delayed.

Float/Slack : Amount of time an activity can be delayed without impacting the project end date.

Early Start : The earliest time an activity can start

Early Finish : The earliest time an activity can finish

Late Start : The latest time an activity can start

Late Finish : The latest time an activity can finish

Early Start and Early Finish are calculated in the forward pass and Late Start & Late Finish are calculated in the backward pass.
"""

tasks = dict()
number_of_tasks = int(input("Enter the number of tasks: "))

for i in range(number_of_tasks):
  print("Task " +  str(i+1))  
  name = input("Task Name : ")  
  number_of_dependencies = int(input("Number of dependencies : "))
  dependencies = []
  if number_of_dependencies == 0 :
    dependencies.append('-1')
  else :
    for j in range(number_of_dependencies) :       
      dependencies.append({'id' : input("Dependency " + str(j+1) + " : "), 'duration' : input("Duration : ") })

  key = 'task' + str(i+1)
  tasks[key] = dict()
  tasks[key]['id'] = str(i+1)
  tasks[key]['name'] = name
  tasks[key]['dependencies'] = dependencies
  tasks[key]['ES'] = 0
  tasks[key]['EF'] = 0
  tasks[key]['LS'] = 0
  tasks[key]['LF'] = 0
  tasks[key]['float'] = 0
  tasks[key]['isCritical'] = False

# 10 1 0 2 1 1 10 3 1 1 8 4 1 1 9 5 1 2 8 6 1 4 7 7 3 3 16 5 7 6 7 8 1 5 6 9 1 6 5 10 3 7 12 8 3 9 15

tasks

for i in tasks: 
    if('-1' in tasks[i]['dependencies']):
        tasks[i]['ES'] = 0                
    else:
        for k in tasks.keys():
          for dependency in tasks[k]['dependencies']:                                                                           
            if(dependency != '-1' and len(tasks[k]['dependencies']) == 1):
                tasks[k]['ES'] = int(tasks['task'+ dependency["id"]]['ES']) + int(dependency["duration"])              
            elif(dependency !='-1' and len(tasks[k]['dependencies']) > 1 ):
              tasks[k]['ES'] = max(int(tasks['task'+ dependency["id"]]['ES']) + int(dependency["duration"]), tasks[k]['ES'])

aList = list()
for element in tasks.keys():
    aList.append(element)

bList = list()
while len(aList) > 0:
    bList.append(aList.pop())

tasks

for q in bList:
    if(bList.index(q) == 0):
      tasks[q]['LF']=tasks[q]['ES']      

    for dependency in tasks[q]['dependencies']:      
      
        if(dependency != '-1'):
            if(tasks['task'+ dependency['id']]['LF'] == 0):
                tasks['task'+ dependency['id']]['LF'] = int(tasks[q]['LF']) - int(dependency['duration'])
        elif dependency == '-1':
          tasks[q]['LF'] = tasks[q]['ES']

print("Activity\tDuration\tES\tEF\tLS\tLF\tFloat\tisCritical")
print()
for k in tasks.keys():
  for dependency in tasks[k]['dependencies']:
    if dependency != '-1':      
      print(dependency['id'] + " -> " + 
            k[4:] + "\t\t\t" + 
            
            dependency["duration"] + "\t" +  
            str( tasks["task" + dependency['id']]['ES']) + "\t" + 
            str(int(dependency["duration"]) + tasks["task" + dependency['id']]['ES'])  + "\t" +             
            str(tasks["task" + k[4:]]['LF'] - int(dependency["duration"]) ) + "\t" + 
            str( tasks["task" + k[4:]]['LF'])+ "\t" + 
            str(abs(tasks["task" + dependency['id']]['ES'] - (tasks["task" + k[4:]]['LF'] - int(dependency["duration"])) ))  +  
            ( "\tTrue"  if abs(tasks["task" + dependency['id']]['ES'] - (tasks["task" + k[4:]]['LF'] - int(dependency["duration"]))) == 0 else "\t-" )
      )

output = list()

for k in tasks.keys():
  for dependency in tasks[k]['dependencies']:
    if dependency != '-1':           
      if abs(tasks["task" + dependency['id']]['ES'] - (tasks["task" + k[4:]]['LF'] - int(dependency["duration"])) ) == 0 : 
        t = dict()        
        t[str(dependency['id'])]= int(k[4:])
        output.append(t)

lis = [z for y in (x.keys() for x in output) for z in y]
lis = list(dict.fromkeys(lis))

final = list()
for i in lis :  
  res = [ sub.get(i) for sub in output if sub.get(i) ]
  t = dict()
  t[i] = res
  final.append(t)

to_start = lis[0]

while to_start != str(number_of_tasks):
  
  r = [sub.get(to_start) for sub in final if sub.get(to_start) ]  
  print(to_start + " ->", end =" ")
  if len(r[0]) > 1 :
    to_start = str(r[0][1])      
  else:
    to_start = str(r[0][0])    

print(to_start)


